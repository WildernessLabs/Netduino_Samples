<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="indexHTML" xml:space="preserve">
    <value>&lt;h1&gt;NeonMika.Webserver&lt;/h1&gt;&lt;br&gt;
&lt;br&gt;
Hello out there!&lt;br&gt;
Thanks for using NeonMika.Webserver! :)&lt;br&gt;
&lt;br&gt;
The more people using this webserver, the more we can make it better.&lt;br&gt;
So please give feedback at &lt;br&gt;
http://forums.netduino.com/index.php?/topic/2889-neonmikawebserver/ &lt;br&gt;
or/and at&lt;br&gt;
http://neonmikawebserver.codeplex.com/ &lt;br&gt;
&lt;br&gt;
Thanks &amp; have fun with NeonMika.Weberserver,&lt;br&gt;
Markus&lt;br&gt;
&lt;br&gt;
-------------------------------------------------------&lt;br&gt;
-------------------------------------------------------&lt;br&gt;
&lt;br&gt;
Here is a list with all pre-coded webmethods you can use &lt;br&gt;
within your browser or any other application &lt;br&gt;
to communicate with your Netduino: &lt;br&gt;
&lt;br&gt;
echo (Returns the submitted value)&lt;br&gt;
-&amp;gt; netduinoplus/echo?value=[a-Z]&lt;br&gt;
&lt;br&gt;
switchDigitalPin (Switches the selected pin from true to false and vis-a-vis)&lt;br&gt;
-&amp;gt; netduinoplus/switchDigitalPin?pin=[0-13]&lt;br&gt;
&lt;br&gt;
setDigitalPin (Set the selected digital pin to the selected state)&lt;br&gt;
-&amp;gt; netduinoplus/setDigitalPin?pin=[0-13]&amp;state=[true|false]&lt;br&gt;
&lt;br&gt;
pwm (Set the PWM of the pin to the submitted period &amp; duration&lt;br&gt;
-&amp;gt; netduinoplus/pwm?pin=[5|6|9|10]&amp;period=[int]&amp;duration=[int]&lt;br&gt;
&lt;br&gt;
getAnalogPinValue (Return the value of the selected analog pin)&lt;br&gt;
-&amp;gt; netduinoplus/getAnalogPinValue?pin=[0-5]&lt;br&gt;
&lt;br&gt;
getDigitalPinState (Returns your selected pin's state (on / off))&lt;br&gt;
-&amp;gt; netduinoplus/getDigitalPinState?pin=[0-13]&lt;br&gt;
&lt;br&gt;
getAllAnalogPinValues (Return the value for each analog pin)&lt;br&gt;
-&amp;gt; netduinoplus/getAllAnalogPinValues&lt;br&gt;
&lt;br&gt;
getDigitalPinState (Returns the state for each digital pin)&lt;br&gt;
-&amp;gt; netduinoplus/getAllDigitalPinStates&lt;br&gt;
&lt;br&gt;
fileUpload (Uploads a file to the path on the SD card via POST. You have to write the file-data (bytes) into the POST body)&lt;br&gt;
-&amp;gt; netduinoplus/upload?path=[a-Z]&lt;br&gt;
&lt;br&gt;
AND FOR SURE:&lt;br&gt;
File and directory response&lt;br&gt;
Just type in netduinoplus/[pathtomyfile] and you can view / download your file. If the given path is a directory, a directory view will be returned&lt;br&gt;
&lt;br&gt;
More for testing purpose, but also part of NeonMika.Webserver:&lt;br&gt;
&lt;br&gt;
xmlResponselist (Gives you a list of all XML methods)&lt;br&gt;
-&amp;gt; netduinoplus/xmlResponselist&lt;br&gt;
&lt;br&gt;
jsonResponselist (Gives you a list of all JSON methods)&lt;br&gt;
-&amp;gt; netduinoplus/jsonResponselist&lt;br&gt;
&lt;br&gt;
multipleXML (Example on how to use nested XML)&lt;br&gt;
-&amp;gt; netduinoplus/multixml&lt;br&gt;</value>
  </data>
</root>